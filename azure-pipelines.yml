trigger:
- main   # Rama que dispara el pipeline (ajústalo a tu rama)

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
# Paso 1: Usar .NET 8
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Paso 2: Restaurar dependencias
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Paso 3: Compilar
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Paso 4: Ejecutar pruebas (si no tienes, se puede quitar)
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build --verbosity normal'
  continueOnError: true   # Si no hay tests, no falla el pipeline

# Paso 5: Publicar artefacto
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

# Paso 6: Guardar artefacto para despliegue
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# Paso 7: Desplegar a Azure App Service
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<NombreConexionAzure>'   # Se configura en Azure DevOps > Project Settings > Service connections
    appName: '<NombreDeTuAppService>'           # Nombre de tu Web App en Azure
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
